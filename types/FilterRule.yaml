---
"$schema": http://json-schema.org/draft-04/schema#
description: RuleWithLoggingOption
allOf:
- "$ref": file://types/RuleWithInterfaceFilter.yaml#
- "$ref": file://types/RuleWithAfFilter.yaml#
- "$ref": file://types/RuleWithLoggingOption.yaml#
- "$ref": file://types/RuleWithTrafficSelector.yaml#
- "$ref": file://types/RuleWithTagFilter.yaml#
- "$ref": file://types/RuleCanSetTag.yaml#
- type: object
  properties:
    action:
      type: string
      enum:
        - accept
        - reject
        - drop
        # - pass
        # - block
        # - block return
    silently_drop:
      type: boolean
      description: |
        If it is a blocking rule the silently drop option will be used to
        select the correct return mode (reject or drop)
      default: true
    direction:
      type: string
      description: |
        This rule applies to incoming or outgoing packets.  If neither in
        nor out are specified, the rule will match packets in both directions.
      enum:
        - both
        - in
        - out
      default: both
    quick:
      type: boolean
      description: |
        If a packet matches a rule which has the quick option set, this
        rule is considered the last matching rule, and evaluation of subse-
        quent rules is skipped.
      default: false
    group:
      type: array
      items:
        type: string
      description: |
        Similar to user, this rule only applies to packets of sockets owned
        by the specified group.
    user:
      type: array
      items:
        type: string
      description: |
        This rule only applies to packets of sockets owned by the specified
        user.  For outgoing connections initiated from the firewall, this
        is the user that opened the connection.  For incoming connections
        to the firewall itself, this is the user that listens on the desti-
        nation port.  For forwarded connections, where the firewall is not
        a connection endpoint, the user and group are unknown.

        All packets, both outgoing and incoming, of one connection are
        associated with the same user and group.  Only TCP and UDP packets
        can be associated with users; for other protocols these parameters
        are ignored.

        User and group refer to the effective (as opposed to the real) IDs,
        in case the socket is created by a setuid/setgid process.  User and
        group IDs are stored when a socket is created; when a process cre-
        ates a listening socket as root (for instance, by binding to a
        privileged port) and subsequently changes to another user ID (to
        drop privileges), the credentials will remain root.

        User and group IDs can be specified as either numbers or names.
        The syntax is similar to the one for ports. The value unknown
        matches packets of forwarded connections.  unknown can only be used
        with the operators = and !=.  Other constructs like user >= unknown
        are invalid.  Forwarded packets with unknown user and group ID
        match only rules that explicitly compare against unknown with the
        operators = or !=.  For instance user >= 0 does not match forwarded
        packets.  The following example allows only selected users to open
        outgoing connections:

        block out proto { tcp, udp } all
        pass  out proto { tcp, udp } all user { < 1000, dhartmei }
    tos:
      type: string
      description: |
        This rule applies to packets with the specified TOS bits set.  TOS
        may be given as one of lowdelay, throughput, reliability, or as
        either hex or decimal.

        For example, the following rules are identical:

        pass all tos lowdelay
        pass all tos 0x10
        pass all tos 16
    # TODO: Allow state based rules
    # attribute :state, Symbol
    # (  "no" | "keep" |  "modulate" | "synproxy"  ) "state"
    # [  "(" state-opts ")" ]
    allow_opts:
      type: boolean
      default: false
      description: |
        By default, IPv4 packets with IP options or IPv6 packets with rout-
        ing extension headers are blocked.  When allow-opts is specified
        for a pass rule, packets that pass the filter based on that rule
        (last matching) do so even if they contain IP options or routing
        extension headers.  For packets that match state, the rule that
        initially created the state is used.  The implicit pass rule that
        is used when a packet does not match any rules does not allow IP
        options.
    label:
      type: string
      description: |
        Adds a label (name) to the rule, which can be used to identify the
        rule.  For instance, pfctl -s labels shows per-rule statistics for
        rules that have labels.
    queue:
      type: array
      items:
        type: string
      description: |
        Packets matching this rule will be assigned to the specified queue.
        If two queues are given, packets which have a TOS of lowdelay and
        TCP ACKs with no data payload will be assigned to the second one.
        See QUEUEING for setup details.
    probability:
      type: integer
      default: -1
      description: |
        A probability attribute can be attached to a rule, with a value set
        between 0 and 1, bounds not included.  In that case, the rule will
        be honoured using the given probability value only.
